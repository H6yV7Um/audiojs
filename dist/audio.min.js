function Audio(t) {
    var o = this;
    return o._store = [], o._eventQ = [], o._status = {
        load: [],
        ready: [],
        start: [],
        stop: [],
        play: [],
        pause: [],
        mute: [],
        vocal: []
    }, o._ctx = null, !!o._init(t || {}) && o
}

!function () {
    function t() {
    }

    var e = t.prototype;
    e.isArr = function (t) {
        return t && t.constructor === [].constructor
    }, e.isObj = function (t) {
        return t && t.constructor === {}.constructor
    }, e.toArr = function (t) {
        var o = [];
        return e.isArr(t) ? o = t : o.push(t), o
    }, e.clone = function (t) {
        return JSON.parse(JSON.stringify(t))
    }, e.merge = function (t, o) {
        for (var r in o) t.hasOwnProperty(r) && (e.isObj(t[r]) && e.isObj(o[r]) ? e.merge(t[r], o[r]) : t[r] = o[r]);
        return t
    }, e.equalArr = function (t, o) {
        var r = !0;
        return !(!e.isArr(t) || !e.isArr(o) || t.length !== o.length) && (t.forEach(function (t) {
            -1 === o.indexOf(t) && (r = !1)
        }), r)
    }, Audio.prototype._utils = new t
}(), Audio.prototype._loader = function (o) {
    var r = this;
    if (!r.has(o)) return r.dispatchEvent("id not found"), r;
    var e = r.find(o), t = null, n = r._loader.prototype;
    switch (e.option.loader.model) {
        case"Ajax":
            t = n.Ajax;
            break;
        case"File":
            t = n.File
    }
    return t ? ((t = new t(e.option.source)).onload(function (t) {
        e.resource.sourceData = t, r.dispatchEvent("load", o, t)
    }), t.onerror(function (t) {
        r.dispatchEvent("error", o, t)
    })) : r.dispatchEvent("error", o, "loader model error"), r
}, function () {
    function t(t) {
        var o = this;
        return o.load = function () {
        }, o.error = function () {
        }, o.init(t), o
    }

    var o = t.prototype;
    o.init = function (t) {
        var o = new XMLHttpRequest, r = this;
        if (this.check(t)) {
            var e = {method: "GET", url: t.url || "", async: !0, data: t.data || {}, header: t.header || {}},
                n = this.formatData(e.data);
            for (var i in n = n.length ? "?" + n : "", o.open(e.method, e.url + n, e.async), e.header) o.setRequestHeader(i, t.headers[i]);
            o.responseType = "arraybuffer", o.onload = function () {
                r.load(o.response)
            }, o.onerror = function (t) {
                r.error("XMLHttpRequest error" + t)
            }, o.send(null)
        }
    }, o.formatData = function (t) {
        var o = "";
        for (var r in t) o += r + "=" + t[r] + "&";
        return o.split("").slice(0, -1).join("")
    }, o.check = function (t) {
        return "string" != typeof t.url ? (this.error("option error"), !1) : t.data && "object" != typeof t.data ? (this.error("option error"), !1) : !t.header || "object" == typeof t.header || (this.error("option error"), !1)
    }, o.onload = function (t) {
        "function" == typeof t && (this.load = t)
    }, o.onerror = function (t) {
        "function" == typeof t && (this.error = t)
    }, Audio.prototype._loader.prototype.Ajax = t
}(), function () {
    function t(t) {
        var o = this;
        return o.load = function () {
        }, o.error = function () {
        }, o.init(t), o
    }

    var o = t.prototype;
    o.init = function (t) {
        var o = new FileReader, r = this;
        o.readAsArrayBuffer(t), o.onLoad = function () {
            r.load(o.result)
        }, o.onerror = function (t) {
            r.error("FileReader error" + t)
        }
    }, o.onload = function (t) {
        "function" == typeof t && (this.load = t)
    }, o.onerror = function (t) {
        "function" == typeof t && (this.error = t)
    }, Audio.prototype._loader.prototype.File = t
}(), Audio.prototype._decode = function (o) {
    var r = this;
    if (!r.has(o)) return r.dispatchEvent("id not found"), r;
    var e = r.find(o).resource;
    return r._ctx.decodeAudioData(e.sourceData.slice(0), function (t) {
        e.buffer = t, r.dispatchEvent("ready", o, t)
    }, function (t) {
        r.dispatchEvent("error", o, "decode" + t)
    }), r
}, function () {
    var t = Audio.prototype;
    t.add = function (t, o) {
        var r = this;
        if ("object" != typeof t) return r.dispatchEvent("error", 0, "option error"), [];
        var e, n = 0, i = 0, u = r._utils;
        return e = u.toArr(t).map(function (t) {
            return i = r._store.length, n = i ? r._store[i - 1].id + 1 : 1, r._store.push(u.merge(u.clone(r.option), {
                id: n,
                option: t
            })), n
        }), r._run(e), o && o.call(r), e
    }, t.delete = function (r) {
        var e = this;
        return e.has(r) ? (e._store.forEach(function (t, o) {
            t.id === r && (e._store.resource && e._store.resource.sourceAudio && e.stop(r), e._store.splice(o, 1))
        }), e.removeEventListener(r, void 0)) : e.dispatchEvent("error", r, "id not found"), e
    }, t.update = function (r, e) {
        var n = this, i = n._utils;
        !n.has(r) && i.isObj(e) ? n._store.forEach(function (t, o) {
            t.id === r && (n._store.resource.sourceAudio && n.stop(r), n._store[o] = i.merge(i.clone(n.option), {
                id: r,
                option: e
            }), n._run(r))
        }) : (!n.has(r) && n.dispatchEvent("error", r, "id not found"), "object" != typeof e && n.dispatchEvent("error", r, "option error"))
    }, t.find = function (o) {
        var r = this._store;
        return this._store.forEach(function (t) {
            t.id === o && (r = t)
        }), r
    }, t.has = function (o) {
        var r = 0;
        return this._store.forEach(function (t) {
            t.id === o && (r = o)
        }), r
    }, t.findId = function (o) {
        var r = 0;
        return this._store.forEach(function (t) {
            t.option.name === o && (r = t.id)
        }), r
    }, t.getAllId = function () {
        return this._store.map(function (t) {
            return t.id
        })
    }
}(), function () {
    var t = Audio.prototype;
    t.fade = function (o, r, t, e) {
        var n = this;
        return n._utils.toArr(n.find(e)).forEach(function (t) {
            t.resource.gainNode.gain.linearRampToValueAtTime(o, n._ctx.currentTime + r)
        }), t && setTimeout(function () {
            t.call(n)
        }, 1e3 * r), n
    }, t.play = function (t) {
        var o = this;
        return o._utils.toArr(o.find(t)).forEach(function (t) {
            t.resource.gainNode.connect(o._ctx.destination), t.temp.pause = !1
        }), o.dispatchEvent("play", t), o
    }, t.pause = function (t) {
        var o = this;
        return o._utils.toArr(o.find(t)).forEach(function (t) {
            t.temp.pause && o.play(t.id), t.resource.gainNode.disconnect(o._ctx.destination), t.temp.pause = !0
        }), o.dispatchEvent("pause", t), o
    }, t.start = function (o) {
        var r, e = null, n = this;
        return n._utils.toArr(n.find(o)).forEach(function (t) {
            !t.temp.stop && n.stop(o), n._create(t.id), e = t.resource.sourceAudio, r = t.option.control, e.start ? e.start(r.delay, r.start, r.end || void 0) : e.noteOn(r.delay, r.start, r.end || void 0), t.temp.stop = !1
        }), n.dispatchEvent("start", o), n
    }, t.stop = function (t) {
        var o = null;
        return this._utils.toArr(this.find(t)).forEach(function (t) {
            (o = t.resource.sourceAudio).stop ? o.stop(0) : o.noteOff(0), t.temp.stop = !0
        }), this
    }, t.ascVolume = function (o, r) {
        var e = this;
        return e._utils.toArr(e.find(r)).forEach(function (t) {
            e.setVolume(t.option.control.volume + +o, r)
        }), e
    }, t.decVolume = function (o, r) {
        var e = this;
        return e._utils.toArr(e.find(r)).forEach(function (t) {
            e.setVolume(t.option.control.volume - +o, r)
        }), e
    }, t.setVolume = function (o, t) {
        var r = this;
        return r._utils.toArr(r.find(t)).forEach(function (t) {
            t.option.control.volume = +o, t.resource.gainNode.gain.setTargetAtTime(t.option.control.volume, r._ctx.currentTime, .015)
        }), r
    }, t.mute = function (t) {
        var o = this;
        return o._utils.toArr(o.find(t)).forEach(function (t) {
            t.resource.gainNode.gain.setTargetAtTime(0, o._ctx.currentTime, .015)
        }), o.dispatchEvent("mute", t), o
    }, t.vocal = function (o) {
        var r = this;
        return r._utils.toArr(r.find(o)).forEach(function (t) {
            r.setVolume(t.option.control.volume, o)
        }), r.dispatchEvent("vocal", o), r
    }
}(), function () {
    var t = Audio.prototype;
    t.onLoad = function (t, o, r) {
        return this.addEventListener("load", t, o, void 0 === r || r)
    }, t.onReady = function (t, o, r) {
        return this.addEventListener("ready", t, o, void 0 === r || r)
    }, t.onStart = function (t, o, r) {
        return this.addEventListener("start", t, o, r)
    }, t.onStop = function (t, o, r) {
        return this.addEventListener("stop", t, o, r)
    }, t.onPlay = function (t, o, r) {
        return this.addEventListener("play", t, o, r)
    }, t.onPause = function (t, o, r) {
        return this.addEventListener("pause", t, o, r)
    }, t.onMute = function (t, o, r) {
        return this.addEventListener("mute", t, o, r)
    }, t.onvocal = function (t, o, r) {
        return this.addEventListener("vocal", t, o, r)
    }, t.onerror = function (t, o, r) {
        return this.addEventListener("error", t, o, r)
    }, t.addEventListener = function (t, o, r, e, n) {
        var i = this;
        return r || (r = i.getAllId()), r = i._utils.toArr(r), t && o && r.length ? i._eventQ.push({
            id: r,
            type: t,
            once: e,
            protect: n,
            callback: o
        }) : i.dispatchEventErr("addEventListener arguments error"), i
    }, t.removeEventListener = function (e, n) {
        var i = this;
        e || (e = i.getAllId()), (e = i._utils.toArr(e)).length && n ? i._eventQ.forEach(function (t, o, r) {
            !t.protect && i._utils.equalArr(t.id, e) && t.type === n && r.splice(o, 1)
        }) : i.dispatchEventErr("removeEventListener arguments error")
    }, t.dispatchEventErr = function (t) {
        throw new Error(t)
    }, t.dispatchEvent = function (o, t, r) {
        var e = this, n = e._status;

        function i(r, t) {
            e._utils.toArr(t).forEach(function (t) {
                var o = r.indexOf(t);
                -1 < o && r.splice(o, 1)
            })
        }

        switch (t || (t = e.getAllId()), o) {
            case"start":
                i(n.stop, t);
                break;
            case"stop":
                i(n.start, t);
                break;
            case"play":
                i(n.pause, t);
                break;
            case"pause":
                i(n.play, t);
                break;
            case"mute":
                i(n.vocal, t);
                break;
            case"vocal":
                i(n.mute, t)
        }
        e._utils.toArr(t).forEach(function (t) {
            -1 === n[o].indexOf(t) && n[o].push(t)
        });
        var u = !0;
        e._eventQ.forEach(function (t) {
            t.type === o && (u = !0, t.id.forEach(function (t) {
                -1 === n[o].indexOf(t) && (u = !1)
            }), u && (t.callback.call(e, r), t.once && setTimeout(function () {
                e.removeEventListener(t.id, t.type)
            }, 0)))
        })
    }
}(), function () {
    var t = Audio.prototype;
    t._init = function (t) {
        var o = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;
        return o ? (this._ctx = new o, (t.visibility || void 0 === t.visibility) && this.visibility(), !0) : (this.dispatchEvent("error", 0, "unsupport Web Audio API"), !1)
    }, t._run = function (t) {
        var u = this;
        u._utils.toArr(t).forEach(function (t) {
            var o, r, e, n, i;
            o = t, r = u.find(o), e = r.option, n = e.loader, i = r.resource, n.load && u._loader(o), n.load && u.addEventListener("load", function () {
                u._decode(o)
            }, o, !0), !n.load && n.decode && (i.sourceData = e.source, u._decode(o)), n.decode && u.addEventListener("ready", function () {
                e.control.autoPlay && !e.sprite && u.start(o)
            }, o, !0), n.load || n.decode || (i.buffer = e.source.slice(0), e.control.autoPlay && !e.sprite && u.start(o))
        })
    }, t.visibility = function () {
        var t = this;
        document.addEventListener("visibilitychange", function () {
            document.hidden ? t.pause() : t.play()
        })
    }
}(), Audio.prototype._create = function (o) {
    var r = this;
    if (!r.has(o)) return r.dispatchEvent("id not found"), r;
    var t = r.find(o), e = t.resource, n = t.option;
    return e.sourceAudio = r._ctx.createBufferSource(), e.sourceAudio.buffer = e.buffer, e.gainNode = r._ctx.createGain ? r._ctx.createGain() : r._ctx.createGainNode(), e.gainNode.gain.setTargetAtTime(n.control.volume, r._ctx.currentTime, .015), e.sourceAudio.loop = n.control.loop, e.sourceAudio.loopStart = n.control.loopStart, e.sourceAudio.loopEnd = n.control.loopEnd, e.sourceAudio.connect(e.gainNode), e.gainNode.connect(r._ctx.destination), e.sourceAudio.onended = function (t) {
        r.dispatchEvent("stop", o, t)
    }, r
}, Audio.prototype.option = {
    id: 0,
    option: {
        name: "",
        loader: {model: "Ajax", load: !0, decode: !0},
        sprite: !1,
        source: {url: "", data: {}, header: {}},
        control: {volume: 1, autoPlay: !1, delay: 0, start: 0, end: 0, loop: !1, loopStart: 0, loopEnd: 0}
    },
    temp: {stop: !0, pause: !1},
    resource: {sourceData: null, buffer: null, sourceAudio: null, gainNode: null}
}, Audio.prototype.sprite = function (o, r) {
    var e = this, n = e._utils;
    e.addEventListener("load", function () {
        var t = n.toArr(r).map(function (t) {
            return {
                name: t.name || "",
                loader: {model: "Buffer", load: !1, decode: !0},
                sprite: !1,
                source: e.find(o).resource.sourceData,
                control: n.merge(n.clone(e.option.option.control), t.control)
            }
        });
        e.add(t, function () {
            e.delete(o)
        })
    }, o, !0, !1)
};